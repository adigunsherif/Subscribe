<?php

/**
 * @file
 * Sending mails
 */


/**
 * Implements hook_entity_insert().
 */
function subscribe_node_insert(\Drupal\node\NodeInterface $node) {
  $content_type = $node->getType();

  //Get subscriptions for this type.
  $database = \Drupal::database();
  $subscriptions = $database->query("SELECT mail FROM {subscribe_subscriptions} WHERE content_type = :type", [':type' => $content_type])->fetchCol();

  //run batch operation to avoid timeout
  if(!empty($subscriptions)){
    $operations = [];

    foreach ($subscriptions as $email) {
      $operations[] = [
        'batch_subscription_send_mail',
        [
          $email,
          $node->getTitle(),
        ],
      ];

    }

    $batch = [
      'title' => t('Sending mail'),
      'operations' => $operations,
      'finished' => 'batch_subscription_finished',
      'progress_message' => 'Processed @current out of @total.',
    ];

    batch_set($batch);

  }

}

/**
 * Batch operation: one at a time.
 *
 * This is the function that is called on each operation.
 */
function batch_subscription_send_mail($email, $title, &$context) {
  $context['results'][] = $email;

  $params['subject'] = $title;
  $params['body'] =  'The content body here.';

  $mailManager = \Drupal::service('plugin.manager.mail');
  $mailManager->mail('subscribe', 'subscribe', $email, $langcode, $params);

}

/**
 * Batch 'finished' callback.
 */
function batch_subscription_finished($success, $results, $operations) {
  $messenger = \Drupal::messenger();
  if ($success) {
    $messenger->addMessage(t('@count results processed.', ['@count' => count($results)]));
  }
  else {
    // An error occurred.
    // $operations contains the operations that remained unprocessed.
    $error_operation = reset($operations);
    $messenger->addMessage(
      t('An error occurred while processing @operation with arguments : @args',
        [
          '@operation' => $error_operation[0],
          '@args' => print_r($error_operation[0], TRUE),
        ]
      )
    );
  }
}

/**
 * Implements hook_mail().
 */
function subscribe_mail($key, &$message, $params) {
  //todo some stuff
  $language = \Drupal::languageManager()
    ->getLanguage($message['langcode']);

  $message['subject'] = $params['subject'];
  $message['body'][] = $params['body'];
}
